---
title: "From Text<br>to<br>SQL Agent"
subtitle: "Smart Query in Action"
author: Eric Julianto
format:
    revealjs:
        theme: styles.css
        slide-number: c/t
        chalkboard:
            buttons: true
            theme: whiteboard
        transition: slide
        background-transition: fade
        code-copy: true
        code-fold: false
        code-overflow: wrap
        smaller: false
        incremental: false
        preview-links: auto
        logo: "logo.png"
        footer: ""
        margin: 0.1
        fig-responsive: true
        highlight-style: github
        html-math-method: katex
---

#  

![](./memes/hello-hello-everybody.jpg){width=300 style="margin: 20px auto; display: block;"}


## About Me {.smaller}

:::: {.columns}
::: {.column width="30%"}

![](profile.jpg){width=200 style="border-radius: 50%; margin-bottom: 15px; display: block; margin-left: auto; margin-right: auto;"}

<div style="font-size: 0.9em; line-height: 1.8;">

**x.com**/algonacci

**github.com**/algonacci

**linkedin.com**/eric-julianto

**instagram.com**/eric.juliantooo

</div>
:::

::: {.column width="70%"}
<div style="padding-left: 30px;">

**Work Experience**

<style>
.compact-list li { margin-bottom: 0.3em; line-height: 1.2; }
.compact-list .period { font-size: 0.85em; color: #666; display: block; margin-top: -0.2em; }
</style>

<div class="compact-list">

- Research Analyst at Braincore
<span class="period">(Dec 21 - Now)</span>

- Machine Learning Mentor at Bangkit Academy
<span class="period">(Feb 23 - Jan 24)</span>

- SEO Intern at Dibilabs by Dibimbing.id
<span class="period">(Mar 23 - Jun 23)</span>

- AI Developer Intern at ZettaByte
<span class="period">(May 22 - Aug 22)</span>

</div>

**Education**

- Hospitality & Tourism at Universitas Bunda Mulia
- Computer Science at Universitas Esa Unggul

</div>
:::
::::


#   

![](./memes/nice-to-meet-you.jpg){width=300 style="margin: 20px auto; display: block;"}

# Let's talk about <br> SQL Agent {.center}

#

![](./memes/tau-apa-tentang-sql-agent){width=400 style="margin: 20px auto; display: block;"}


# From Text to<br>SQL Agent {.center .smaller}

**Smart Query in Action**

Mengubah pertanyaan dalam bahasa natural menjadi SQL query menggunakan LLM

---

## Problem Statement ü§î

:::: {.columns}
::: {.column width="50%"}
**Tantangan:**

- SQL syntax sulit dipelajari
- Tidak semua orang familiar dengan database schema
- Query kompleks butuh waktu lama
- Sering typo atau syntax error
:::

::: {.column width="50%"}
**Solusi:**

- Natural language ‚Üí SQL
- AI memahami struktur database
- Generate query otomatis
- User-friendly interface
:::
::::

---

## Arsitektur Sistem {.smaller}

```{mermaid}
flowchart LR
    A[User Input] --> B[Intent Classification]
    B -->|query| C[SQL Generator]
    B -->|schema_info| D[Schema Info Generator]
    C --> E[Query Cleaner]
    E --> F[SQL Executor]
    F --> G[Result Formatter]
    D --> H[Schema Formatter]
    G --> I[Display Results]
    H --> I

    style A fill:#e1f5fe
    style B fill:#fff3e0
    style C fill:#c8e6c9
    style D fill:#c8e6c9
    style F fill:#ffebee
    style I fill:#f3e5f5
```

---

## How It Works ‚öôÔ∏è

1. **Input** - User mengetik pertanyaan dalam bahasa natural
2. **Intent Classification** - LLM mengklasifikasi: `query` atau `schema_info`
3. **Generation** - LLM membuat SQL query atau info schema
4. **Execution** - Execute query di database (read-only)
5. **Display** - Tampilkan hasil dalam format rapi

---

## Demo Flow üé¨

```bash
üí¨ Masukkan pertanyaan ('exit' untuk keluar):
> ada berapa users?

üîç Intent terdeteksi: 'query'
‚úÖ SQL query berhasil dibuat

üìù Generated Query:
   SELECT COUNT(*) FROM users

‚úÖ Query berhasil dijalankan

üìä Hasil Query (1 rows):
 COUNT(*)
      106
```

---

## Code Structure üìÅ {.smaller}

Modular design dengan separation of concerns:

:::: {.columns}
::: {.column width="50%"}
**`simple.py`**

Main orchestration:
- `main()` - Entry point & loop
- `handle_query_intent()` - Query handler
- `handle_schema_info_intent()` - Schema handler
- Error handling & UX
:::

::: {.column width="50%"}
**`helpers.py`**

Utility functions:
- Setup (env, OpenAI, database)
- `classify_intent()` - Intent detection
- `generate_sql_query()` - SQL generation
- `execute_select_query()` - Query execution
- Error handling & validation
:::
::::

---

## Key Component: Main Loop {.smaller}

```python
def main():
    # Setup environment dan services
    load_environment()
    client = setup_openai_client()
    engine, inspector = setup_database()

    # Ambil schema database
    schema_data = get_database_schema(inspector)

    # Main loop
    while True:
        user_input = input("\nüí¨ Masukkan pertanyaan: ").strip()

        # Klasifikasi intent
        intent = classify_intent(client, user_input)

        # Handle berdasarkan intent
        if intent.lower() == "query":
            handle_query_intent(client, engine, schema_data, user_input)
        elif intent.lower() == "schema_info":
            handle_schema_info_intent(client, schema_data, user_input)
```

---

## Key Component: Intent Classification {.smaller}

```python
def classify_intent(client, question: str) -> str:
    """Klasifikasi: 'query' atau 'schema_info'"""
    response = client.chat.completions.create(
        model=os.getenv("LLM_MODEL_NAME"),
        messages=[
            {
                "role": "system",
                "content": "Kamu adalah SQL assistant yang sangat mahir."
            },
            {
                "role": "user",
                "content": f"""
                Klasifikasi jenis pertanyaan berikut:
                1. query - Pertanyaan data dari user
                2. schema_info - Informasi schema database

                <question>{question}</question>
                """
            }
        ],
        temperature=0.3
    )
    return response.choices[0].message.content.strip()
```

---

## Key Component: SQL Generation {.smaller}

```python
def generate_sql_query(client, schema_data, question: str) -> str:
    """Generate SQL query dari pertanyaan user"""
    prompt = f"""
Struktur tabel:
{schema_data}

Pertanyaan user: "{question}"

HASIL YANG DIINGINKAN:
- Berikan HANYA SQL query yang dapat dieksekusi langsung
- JANGAN berikan penjelasan atau teks tambahan
- Pastikan query dimulai dengan SELECT
- Query harus valid dan dapat dijalankan
    """

    response = client.chat.completions.create(
        model=os.getenv("LLM_MODEL_NAME"),
        messages=[...],
        temperature=0.3
    )
    return response.choices[0].message.content.strip()
```

---

## Key Component: Query Execution {.smaller}

```python
def execute_select_query(engine, sql_query: str):
    """Execute SELECT query dan return DataFrame"""
    # Validasi query
    if not sql_query.lower().startswith("select"):
        return False, "Hanya query SELECT yang boleh dieksekusi."

    try:
        with engine.connect() as conn:
            result = conn.execute(text(sql_query))
            rows = result.fetchall()

            if rows:
                # Konversi ke DataFrame untuk display
                df = pd.DataFrame(rows, columns=result.keys())
                return True, df
            else:
                return True, "Query berhasil, tapi tidak ada hasil."
    except Exception as e:
        return False, f"Error: {str(e)}"
```

---

## Features ‚ú®

:::: {.columns}
::: {.column width="50%"}
**Smart Features:**

- ü§ñ LLM-powered query generation
- üîç Intent classification
- üìä Auto schema detection
- üõ°Ô∏è Read-only safety (SELECT only)
:::

::: {.column width="50%"}
**UX Features:**

- ‚è≥ Loading indicators
- üéØ Error handling & recovery
- üí¨ User-friendly messages
- üëã Graceful exit (Ctrl+C)
:::
::::

---

## Tech Stack üõ†Ô∏è

| Component | Technology |
|-----------|-----------|
| Language | Python 3.x |
| LLM Client | OpenAI API (compatible) |
| Database | SQLAlchemy (universal) |
| Data Display | Pandas DataFrame |
| Environment | python-dotenv |

: Tech Stack Overview {#tbl-techstack}

---

## Security & Safety üîí {.smaller}

**Built-in Protections:**

1. **Read-only Mode**
   - Hanya query `SELECT` yang diizinkan
   - Tidak bisa `INSERT`, `UPDATE`, `DELETE`, `DROP`

2. **Environment Variables**
   - Credentials disimpan di `.env`
   - Tidak di-commit ke repository

3. **Error Handling**
   - Validation di setiap step
   - Try-catch untuk semua operasi kritis
   - Informative error messages

---

## Example: Simple Query

**Input:**
```
ada berapa users?
```

**Generated SQL:**
```sql
SELECT COUNT(*) FROM users
```

**Output:**
```
COUNT(*)
     106
```

---

## Example: Complex Query

**Input:**
```
tampilkan 5 users dengan email gmail
```

**Generated SQL:**
```sql
SELECT * FROM users
WHERE email LIKE '%@gmail.com%'
LIMIT 5
```

**Output:**
```
   id  name              email                  phone
    1  John Doe          john@gmail.com         081234567890
    2  Jane Smith        jane@gmail.com         081234567891
   ...
```

---

## Example: Schema Info

**Input:**
```
ada apa saja tabel di database?
```

**Response:**
```
üìö Informasi Schema:

Database memiliki 3 tabel:
1. users - Menyimpan data pengguna
2. products - Menyimpan data produk
3. orders - Menyimpan data pesanan

Total: 3 tables
```

---

## Advantages ‚úÖ

- ‚ö° **Fast** - Query generation dalam detik
- üéØ **Accurate** - LLM memahami schema context
- üöÄ **Easy to Use** - No SQL knowledge required
- üîÑ **Reusable** - Modular code structure
- üõ†Ô∏è **Extensible** - Easy to add new features

---

## Challenges & Limitations ‚ö†Ô∏è

1. **LLM Accuracy**
   - Kadang generate query yang tidak optimal
   - Butuh prompt engineering yang baik

2. **Complex Queries**
   - JOIN multi-table masih challenging
   - Aggregasi kompleks perlu tuning

3. **Database Specific**
   - Dialect SQL berbeda per database
   - Perlu testing per platform

---

## Future Improvements üöÄ {.smaller}

:::: {.columns}
::: {.column width="50%"}
**Features:**

- üìà Query history & caching
- üîÑ Query optimization suggestions
- üìä Data visualization
- üíæ Export hasil (CSV, Excel)
- üó£Ô∏è Multi-language support
:::

::: {.column width="50%"}
**Technical:**

- üß™ Unit testing
- üìù Query validation
- üé® Web UI (FastAPI + React)
- üîê User authentication
- üì± Mobile app
:::
::::

---

## Use Cases üíº

1. **Business Analytics**
   - Non-technical users query data
   - Quick insights tanpa SQL

2. **Data Exploration**
   - Explorasi database baru
   - Understand schema cepat

3. **Prototyping**
   - Rapid query testing
   - Data validation

4. **Education**
   - Belajar SQL dari generated queries
   - Understand best practices

---

## Demo Time! üéâ

Live demonstration:

1. Setup environment
2. Run the agent
3. Try different queries
4. Show error handling
5. Explore schema info

```bash
uv run scripts/simple.py
```

---

## Key Takeaways üéì

1. **LLM + Database = Powerful Combo**
   - Natural language accessibility
   - Reduce learning curve

2. **Modular Architecture Matters**
   - Easy to maintain
   - Easy to extend

3. **User Experience is Key**
   - Error handling
   - Helpful messages
   - Smooth interactions

---

## Resources üìö

**Project Repository:**
```
github.com/ericjulianto/from-text-to-sql-agent
```

**Key Dependencies:**
```bash
pip install openai sqlalchemy pandas python-dotenv
```

**Learn More:**
- OpenAI API Documentation
- SQLAlchemy Documentation
- Prompt Engineering Guide

---

# Questions? ü§î {.center}

**Thank you for listening!**

Contact:
- GitHub: @ericjulianto
- Email: eric@example.com

---

## Bonus: Quick Setup Guide {.smaller}

**1. Clone Repository**
```bash
git clone https://github.com/ericjulianto/from-text-to-sql-agent
cd from-text-to-sql-agent
```

**2. Setup Environment**
```bash
cp .env.example .env
# Edit .env dengan credentials Anda
```

**3. Install Dependencies**
```bash
uv pip install -r requirements.txt
```

**4. Run the Agent**
```bash
uv run scripts/simple.py
```

---

## Bonus: .env Configuration {.smaller}

```bash
# LLM Configuration
LLM_BASE_URL=https://api.openai.com/v1
LLM_API_KEY=sk-your-api-key-here
LLM_MODEL_NAME=gpt-4
LLM_MAX_TOKENS=4096

# Database Configuration
DATABASE_URL=postgresql://user:pass@localhost:5432/dbname
```

**Supported Databases:**
- PostgreSQL
- MySQL
- SQLite
- SQL Server
- Oracle
