---
title: "From Text<br>to<br>SQL Agent"
subtitle: "Smart Query in Action"
author: Eric Julianto
format:
    revealjs:
        theme: styles.css
        slide-number: c/t
        chalkboard:
            buttons: true
            theme: whiteboard
        transition: slide
        background-transition: fade
        code-copy: true
        code-fold: false
        code-overflow: wrap
        smaller: false
        incremental: false
        preview-links: auto
        logo: "logo.png"
        footer: ""
        margin: 0.1
        fig-responsive: true
        highlight-style: github
        html-math-method: katex
---

#  

![](./memes/hello-hello-everybody.jpg){width=300 style="margin: 20px auto; display: block;"}


## About Me {.smaller}

:::: {.columns}
::: {.column width="30%"}

![](profile.jpg){width=200 style="border-radius: 50%; margin-bottom: 15px; display: block; margin-left: auto; margin-right: auto;"}

<div style="font-size: 0.9em; line-height: 1.8;">

**x.com**/algonacci

**github.com**/algonacci

**linkedin.com**/eric-julianto

**instagram.com**/eric.juliantooo

</div>
:::

::: {.column width="70%"}
<div style="padding-left: 30px;">

**Work Experience**

<style>
.compact-list li { margin-bottom: 0.3em; line-height: 1.2; }
.compact-list .period { font-size: 0.85em; color: #666; display: block; margin-top: -0.2em; }
</style>

<div class="compact-list">

- Research Analyst at Braincore
<span class="period">(Dec 21 - Now)</span>

- Machine Learning Mentor at Bangkit Academy
<span class="period">(Feb 23 - Jan 24)</span>

- SEO Intern at Dibilabs by Dibimbing.id
<span class="period">(Mar 23 - Jun 23)</span>

- AI Developer Intern at ZettaByte
<span class="period">(May 22 - Aug 22)</span>

</div>

**Education**

- Hospitality & Tourism at Universitas Bunda Mulia
- Computer Science at Universitas Esa Unggul

</div>
:::
::::


#   

![](./memes/nice-to-meet-you.jpg){width=300 style="margin: 20px auto; display: block;"}

# Let's talk about <br> SQL Agent {.center}

#

![](./memes/tau-apa-tentang-sql-agent.png){width=400 style="margin: 20px auto; display: block;"}


# From Text to<br>SQL Agent {.center .smaller}

**Smart Query in Action**

Mengubah pertanyaan dalam bahasa natural menjadi SQL query menggunakan LLM

---

## Problem Statement

:::: {.columns}
::: {.column width="50%"}
**Tantangan:**

- SQL syntax sulit dipelajari
- Tidak semua orang familiar dengan database schema
- Query kompleks butuh waktu lama
- Sering typo atau syntax error
:::

::: {.column width="50%"}
**Solusi:**

- Natural language → SQL
- AI memahami struktur database
- Generate query otomatis
- User-friendly interface
:::
::::

---

## Arsitektur Sistem {.smaller}

![](./arsitektur-sistem.png){width=80%}

---

## How It Works

1. **Input** - User mengetik pertanyaan dalam bahasa natural
2. **Intent Classification** - LLM mengklasifikasi: query atau schema_info
3. **Generation** - LLM membuat SQL query atau info schema
4. **Execution** - Execute query di database (read-only)
5. **Display** - Tampilkan hasil dalam format rapi



#

![](./memes/demo.jpg){width=500 style="margin: 20px auto; display: block;"}

<div style="text-align: center; margin-top: 20px; font-size: 1.5em; font-weight: bold;">
Demo Time
</div>

---

## Quick Setup Guide {.smaller}

**1. Clone Repository**
```bash
git clone https://github.com/algonacci/from-text-to-sql-agent
cd from-text-to-sql-agent
cd scripts
```

**2. Setup Environment**
```bash
cp .env.example .env
```

**3. Install Dependencies**
```bash
uv sync
```

**4. Run the Agent**
```bash
uv run simple.py
```

---

## Tips and Tricks {.smaller}

:::: {.columns}
::: {.column width="50%"}
- Prompt engineering
- Context engineering
- Only query `SELECT` statement
- Validate the generated query statement
:::

::: {.column width="50%"}

- Structured prompt
- Role and persona
- Chain-of-Thought (CoT)
- One shot example
- Few shot example
- Explicit instruction
- Output formatting
- Fallback behavior
:::
::::

---

## Challenges and Limitations {.smaller}

:::: {.columns}
::: {.column width="50%"}
1. **LLM Accuracy**
   - Kadang generate query yang tidak optimal
   - Butuh prompt engineering yang baik

2. **Complex Queries**
   - JOIN multi-table masih challenging
   - Aggregasi kompleks perlu tuning
:::

::: {.column width="50%"}
3. **Database Specific**
   - Dialect SQL berbeda per database
   - Perlu testing per platform
:::
::::

---

## Future Improvements {.smaller}

:::: {.columns}
::: {.column width="50%"}
**Features:**

- Query history & caching
- Query optimization suggestions
- Data visualization
- Export hasil (CSV, Excel)
- Multi-language support
:::

::: {.column width="50%"}
**Technical:**

- Unit testing
- Query validation
- Web UI (FastAPI + React)
- User authentication
- Mobile app
:::
::::

---

## Use Cases {.smaller}

:::: {.columns}
::: {.column width="50%"}
1. **Business Analytics**
   - Non-technical users query data
   - Quick insights tanpa SQL

2. **Data Exploration**
   - Explorasi database baru
   - Understand schema cepat
:::

::: {.column width="50%"}
3. **Prototyping**
   - Rapid query testing
   - Data validation

4. **Education**
   - Belajar SQL dari generated queries
   - Understand best practices
:::
::::


#

![](./memes/so-simple-right.jpg){width=500 style="margin: 20px auto; display: block;"}



# Advanced Case {.center}

**What if...**

---

## What if... {.smaller}

:::: {.columns}
::: {.column width="50%"}
- **Multi Database**
  - Lebih dari 1 database
  - Cross-database queries

- **Dialek Berbeda**
  - PostgreSQL, MySQL, SQL Server
  - Syntax compatibility issues

- **Scale Challenge**
  - Jumlah row sudah jutaan
  - Performance optimization needed
:::

::: {.column width="50%"}
- **Complex Schema**
  - Jumlah tabel sudah ratusan
  - Dependency mapping

- **Security & Privacy**
  - Sensitive data handling
  - Row-level security

- **Real-time Analytics**
  - Streaming data
  - Live dashboard queries
:::
::::

---

## Cara Tackle Advanced Case {.smaller}

**Hybrid Approach: Template-based + LLM Fallback**

:::: {.columns}
::: {.column width="50%"}
**Template Pipeline (~5-10s)**

Pattern Matching → SQL Templates → Execute

**LLM Pipeline (~30-60s)**

Intent → Routing → Schema Filter → SQL Gen → Format
:::

::: {.column width="50%"}
**Key Solutions**

**Multi-DB**: Session registry mapping

**Scale**: 2-stage schema filtering

**Security**: SQL sanitization guards

**Performance**: Template caching

**Complexity**: Foreign key graph
:::
::::

---

## SQL Template Example {.smaller}

**Query**: "Tampilkan user yang aktif dengan role admin"

**Pattern**: USER_LIST_FILTER → **Variables**: `{status: "active", role: "admin", limit: 50}`

```sql
SELECT
    u.id, u.name, u.email,
    u.role, u.status,
    u.created_at
FROM users u
WHERE u.status = '{status}'
  {role_filter}
  AND u.deleted_at IS NULL
ORDER BY u.created_at DESC
LIMIT {limit};
```

**Filled Template**: `{role_filter}` → `AND u.role = 'admin'`

**Result**: Fast, consistent, predictable SQL generation

---

## Deep Dive: Schema Filtering {.smaller}

**Problem**: Ratusan tabel → LLM hallucination & slow

**Solution: 2-Stage Filtering**

:::: {.columns}
::: {.column width="50%"}
**Stage 1: Graph-based**

Required tables + neighbors via FK graph

200 tables → ~30 tables

**Stage 2: LLM Refinement**

Chain-of-Thought reasoning + confidence scoring

30 tables → 5-10 tables
:::

::: {.column width="50%"}
**Best Practices Applied**

Structured prompt

Few-shot examples

Chain-of-Thought

Role & persona definition

Explicit instructions

Fallback behavior
:::
::::

---

## Security: SQL Sanitization {.smaller}

:::: {.columns}
::: {.column width="50%"}
**Guards Module**
```python
def sanitize_sql(sql: str):
  # Only allow SELECT/WITH
  if not starts_with_select():
    raise ValueError()

  # Block dangerous keywords
  if has_forbidden_tokens():
    raise ValueError()

  # Prevent SQL injection
  if has_multiple_statements():
    raise ValueError()

  # Force LIMIT
  ensure_limit(default=500)
```
:::

::: {.column width="50%"}
**Protection Against**

SQL Injection

DROP TABLE attacks

Multi-statement execution

Unbounded queries

Comment-based bypasses

**Read-only enforcement** pada database level
:::
::::

---

## Multi-Database Handling {.smaller}

:::: {.columns}
::: {.column width="50%"}
**Session Registry Pattern**
```python
SESSION_REGISTRY = {
  "db_1": SessionMySQL,
  "db_2": SessionMariaDB,
  "db_3": SessionPSQL,
  "db_4": SessionMariaDB
}
```

**Auto-routing based on**

Intent classification

Keyword mapping

Table requirements
:::

::: {.column width="50%"}
**Dialect-aware SQL Templates**

PostgreSQL: `DATE_TRUNC`

MySQL: `YEAR()`, `DATE_FORMAT`

MariaDB: JSON functions

**Dynamic template selection** berdasarkan detected database
:::
::::

---

## Performance Optimization {.smaller}

:::: {.columns}
::: {.column width="50%"}
**Template-based Pipeline**

17 pre-built SQL templates

Pattern matching ~2-3s

Total query time ~5-10s

99%+ consistency

**Pattern Definitions**

JSON-based pattern library

Variable extraction rules

Default value fallbacks
:::

::: {.column width="50%"}
**Optimization Techniques**

Forced LIMIT on queries

Schema pre-filtering

Foreign key graph caching

Confidence-based routing

Lazy LLM fallback

**Trade-off**: Speed vs Flexibility
:::
::::


#

![](./memes/demo-2.jpg){width=500 style="margin: 20px auto; display: block;"}

<div style="text-align: center; margin-top: 20px; font-size: 1.5em; font-weight: bold;">
Demo Time (Part 2)
</div>

---

## Key Takeaways {.smaller}

:::: {.columns}
::: {.column width="50%"}
1. **LLM + Database = Powerful Combo**
   - Natural language accessibility
   - Reduce learning curve

2. **Modular Architecture Matters**
   - Easy to maintain
   - Easy to extend
:::

::: {.column width="50%"}
3. **User Experience is Key**
   - Error handling
   - Helpful messages
   - Smooth interactions
:::
::::


#

![](./memes/materi-selesai.png){width=400 style="margin: 20px auto; display: block;"}

---

## Resources

:::: {.columns}
::: {.column width="60%"}
**Project Repository:**
```
https://github.com/algonacci/from-text-to-sql-agent
```

**Short Link:**
```
https://s.id/sql-agent-bandungpy
```
:::

::: {.column width="40%"}
![](./qr-sql-agent-bandungpy.png){width=250 style="margin: 0 auto; display: block;"}
:::
::::


<div style="text-align: center;">

## Q&A

![](./memes/any-question.png){width=300 style="margin: 20px auto; display: block;"}

### Thank you for listening!

</div>
